// Incluimos las bibliotecas a utilizar con las funciones para PWM, ADC y GPIO

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"
//#include "hardware/adc.h"
#include "hardware/pwm.h"

//Definios los  GPIOS a utilizar

//#define POT_PIN 26 //ADC a utilizar para modular la velocidad de manera manual
#define PWM_PIN_1 14 // PIN PWM del motor 1
#define PWM_PIN_2 15 // PIN PWM del motor 2
#define PWM_PIN_3 16 // PIN PWM del motor 3
#define PWM_PIN_4 17 // PIN PWM del motor 4

#define ENA_PIN_1 10 // PIN ENABLE A del motor 1
#define ENA_PIN_2 11 // PIN ENABLE B del motor 1
#define ENA_PIN_3 12 // PIN ENABLE A del motor 2
#define ENA_PIN_4 13 // PIN ENABLE B del motor 2
#define ENA_PIN_5 18 // PIN ENABLE A del motor 3
#define ENA_PIN_6 19 // PIN ENABLE B del motor 3
#define ENA_PIN_7 20 // PIN ENABLE A del motor 4
#define ENA_PIN_8 21 // PIN ENABLE B del motor 4

//EL PWM utiliza el reloj del sistema, cada pulso tiene una frecuencia de 125 MHz es decir 8 nano segundos de tiempo, si queremos que
//el TALON SR funcione debemos tener una frecuencia de 1-2 ms con este valor sabremos cual es el valor maximo de ciclos que queremos contar para el PWM
//Si seleccionamos 2 ms como frecuencia el numero de ciclos es: 2ms/8ns = 250,000. pero el PWM llega hasta 65535 por lo que por default se tiene una frecuencia minima de 1.9KHz.
//Por esta razon debemos usar el divider de PWM si queremos 633Hz que es un periodo de 1.66ms entonces el divider es 1.9kHz/3 = 633Hz, divider = 3
//Divider = (125000000/(4096*frecuenciaDeseada))/16
    //existen 8 slices para el PWM cada slice tiene dos salidas PWM, 
    //en total hay 16 salidas PWM, y todos los GPIO pueden controlarlos
    //Para el GPIO 14 es el PWM_A_7, Para el GPIO 15 ES EL PWM_B_7
    //Para el GPIO 16 es el PWM_A_0, Para el GPIO 17 ES EL PWM_B_0
// creamos una función para que funcione el pwm desde 0 a 180
//ADC
//El ADC es de 12 bits por lo que el maximo valor es de 4095
//long map(long x, long in_min, long in_max, long out_min, long out_max)
//{
//    return (x - in_min)*(out_max-out_min) / (in_max-in_min) + out_min;
//}


// Definimos los movimientos
void Alto()
{
	gpio_put(ENA_PIN_1, 0);
	
}
void Adelante()
{
	gpio_
}

// Función Principal
